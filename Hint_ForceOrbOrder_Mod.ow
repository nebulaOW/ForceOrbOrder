variables
{
	global:
		121: orbColor
		122: orbColorArray
		123: tempIterator
		124: menuItems
		125: menuTextCollector
		126: orbHintArray
		127: hintStringsArray

	player:
		123: currentHintCP
		124: autoHintCounter
		125: confirmDelete
		126: menuIsOpen
		127: currentMenuSelection
}

subroutines
{
	126: DisableControls
	127: EnableControls
}


rule("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    Hints / Force Orb Order Mod    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"Created by nebula & Nooter"
		disabled 0 + 0 == True;
	}
}

rule("Global Variables Initilization | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.menuItems = Array(Custom String("Synchronize"), Custom String("Add Hint"), Custom String("Add 2 Orb"), Custom String(
			"Add 3 Orb"), Custom String("Remove Hint"), Custom String("Remove 2 Orb"), Custom String("Remove 3 Orb"));
		Global.menuTextCollector = Array();
	}
}

rule("Menu HUD | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Spray(Event Player) == True;
	}

	actions
	{
		If(Event Player.menuIsOpen == False);
			Event Player.menuIsOpen = True;
			Call Subroutine(DisableControls);
			Create HUD Text(Event Player, Null, Null, Y Component Of(Global.orbHintArray[Event Player.Checkpoint])
				? Global.menuItems[5] : Global.menuItems[2], Top, -46, Null, Null, Event Player.currentMenuSelection == 2 ? Color(Blue)
				: Color(White), String and Color, Default Visibility);
			Modify Global Variable(menuTextCollector, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, X Component Of(Global.orbHintArray[Event Player.Checkpoint])
				? Global.menuItems[4] : Global.menuItems[1], Top, -46, Null, Null, Event Player.currentMenuSelection == 1 ? Color(Blue)
				: Color(White), String and Color, Default Visibility);
			Modify Global Variable(menuTextCollector, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Global.menuItems[0], Top, -46, Null, Null,
				Event Player.currentMenuSelection == 0 ? Color(Blue) : Color(White), String and Color, Default Visibility);
			Modify Global Variable(menuTextCollector, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Null, Z Component Of(Global.orbHintArray[Event Player.Checkpoint])
				? Global.menuItems[6] : Global.menuItems[3], Top, -45, Null, Null, Event Player.currentMenuSelection == 3 ? Color(Blue)
				: Color(White), String and Color, Default Visibility);
			Modify Global Variable(menuTextCollector, Append To Array, Last Text ID);
		Else;
			Destroy HUD Text(Global.menuTextCollector[0]);
			Destroy HUD Text(Global.menuTextCollector[1]);
			Destroy HUD Text(Global.menuTextCollector[2]);
			Destroy HUD Text(Global.menuTextCollector[3]);
			Global.menuTextCollector = Array();
			Event Player.menuIsOpen = False;
			Event Player.confirmDelete = False;
			Call Subroutine(EnableControls);
	}
}

rule("Change Menu Selection | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.menuIsOpen == True;
		Z Component Of(Normalize(Throttle Of(Event Player))) == True;
	}

	actions
	{
		If(Z Component Of(Normalize(Throttle Of(Event Player))) < 0);
			Event Player.confirmDelete = False;
			Event Player.currentMenuSelection += 1;
			If(Event Player.currentMenuSelection > 3);
				Event Player.currentMenuSelection = 0;
			End;
		Else If(Z Component Of(Normalize(Throttle Of(Event Player))) > 0);
			Event Player.confirmDelete = False;
			Event Player.currentMenuSelection -= 1;
			If(Event Player.currentMenuSelection < 0);
				Event Player.currentMenuSelection = 3;
			End;
		End;
	}
}

rule("Disable Controls | Hint / Force Orb Order Mod")
{
	event
	{
		Subroutine;
		DisableControls;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Set Melee Enabled(Event Player, False);
		Set Move Speed(Event Player, 0);
	}
}

rule("Enable Controls | Hint / Force Orb Order Mod")
{
	event
	{
		Subroutine;
		EnableControls;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Melee Enabled(Event Player, True);
		Set Move Speed(Event Player, 100);
	}
}


rule("Left Click Activate Selection | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.menuIsOpen == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		"Sync"
		If(Event Player.currentMenuSelection == 0);
			Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 30);
			"Populate arrays if no previous installation"
			If(Count Of(Global.orbHintArray) == 0);
				Small Message(All Players(All Teams), Custom String("Populating arrays. . ."));
				Global.hintStringsArray = Mapped Array(Global.CPposition, Null);
				Global.orbHintArray = Mapped Array(Global.CPposition, Vector(0, 0, 0));
			"If there are new checkpoints, create new entries in orbHintArray"
			Else If(Count Of(Global.orbHintArray) < Count Of(Global.CPposition));
				Small Message(Event Player, Custom String("Current Data out of sync: re-populating..."));
				Small Message(Event Player, Custom String("Copy Global Variables from Inspector and re-paste"));
				"For each new checkpoint append a new empty vector entry"
				For Global Variable(tempIterator, Count Of(Global.orbHintArray), Count Of(Global.CPposition), 1);
					Modify Global Variable(orbHintArray, Append To Array, Vector(0, 0, 0));
					Modify Global Variable(hintStringsArray, Append To Array, Null);
				End;
			"Corrupt Data"
			Else If(Count Of(Global.orbHintArray) > Count Of(Global.CPposition));
				If(Event Player.confirmDelete == False);
					Small Message(Event Player, Custom String("Data Corrupt! Are you sure you want to delete? Click again to delete."));
					Event Player.confirmDelete = True;
				Else;
					Global.hintStringsArray = Mapped Array(Global.CPposition, Null);
					Global.orbHintArray = Mapped Array(Global.CPposition, Vector(0, 0, 0));
					Small Message(Event Player, Custom String("Data has been overwritten!"));
					Event Player.confirmDelete = False;
				End;
			"Data in sync"
			Else;
				Small Message(Event Player, Custom String("Current Data appears to be in sync."));
			End;
		"Add / Remove Hint"
		Else If(Event Player.currentMenuSelection == 1);
			If(X Component Of(Global.orbHintArray[Event Player.Checkpoint]) == False);
				Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 30);
				Small Message(Event Player, Custom String("Checkpoint {0} ({1}.{2}) has been marked as a Hint CP.", Event Player.Checkpoint,
					Event Player.Level, Event Player.CPcounter));
				"Set X Of orbHintArray vector to true"
				Global.orbHintArray[Event Player.Checkpoint] = Vector(1, Y Component Of(Global.orbHintArray[Event Player.Checkpoint]),
					Z Component Of(Global.orbHintArray[Event Player.Checkpoint]));
				"Create dummy hint text"
				Global.hintStringsArray[Event Player.Checkpoint] = Custom String(" Enter Hint for CP {0}.{1}  | Checkpoint {2} ",
					Event Player.Level, Event Player.CPcounter, Event Player.Checkpoint);
				Wait(1.500, Ignore Condition);
			Else If(X Component Of(Global.orbHintArray[Event Player.Checkpoint]) == True);
				Play Effect(Event Player, Explosion Sound, Color(White), Event Player, 30);
				If(Event Player.confirmDelete == False);
					Small Message(Event Player, Custom String("Are you sure you want to delete? Click again to delete."));
					Event Player.confirmDelete = True;
				Else;
					Small Message(Event Player, Custom String("Checkpoint {0} ({1}.{2}) has been unmarked as a Hint CP.", Event Player.Checkpoint,
						Event Player.Level, Event Player.CPcounter));
					"Set X Of orbHintArray vector to false"
					Global.orbHintArray[Event Player.Checkpoint] = Vector(0, Y Component Of(Global.orbHintArray[Event Player.Checkpoint]),
						Z Component Of(Global.orbHintArray[Event Player.Checkpoint]));
					Global.hintStringsArray[Event Player.Checkpoint] = Null;
					Event Player.confirmDelete = False;
				End;
				Wait(1.500, Ignore Condition);
			End;
		"Add / Remove 2 Orb"
		Else If(Event Player.currentMenuSelection == 2);
			If(Y Component Of(Global.orbHintArray[Event Player.Checkpoint]) == False);
				Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 30);
				Small Message(Event Player, Custom String("Checkpoint {0} ({1}.{2}) has been marked as a 2 Orb CP.", Event Player.Checkpoint,
					Event Player.Level, Event Player.CPcounter));
				"Set Y Of orbHintArray vector to true and Z to False"
				Global.orbHintArray[Event Player.Checkpoint] = Vector(X Component Of(Global.orbHintArray[Event Player.Checkpoint]), 1, 0);
				Wait(1.500, Ignore Condition);
			Else If(Y Component Of(Global.orbHintArray[Event Player.Checkpoint]) == True);
				Play Effect(Event Player, Explosion Sound, Color(White), Event Player, 30);
				If(Event Player.confirmDelete == False);
					Small Message(Event Player, Custom String("Are you sure you want to delete? Click again to delete."));
					Event Player.confirmDelete = True;
				Else;
					Small Message(Event Player, Custom String("Checkpoint {0} ({1}.{2}) has been unmarked as a 2 Orb CP.", Event Player.Checkpoint,
						Event Player.Level, Event Player.CPcounter));
					"Set Y Of orbHintArray vector to false"
					Global.orbHintArray[Event Player.Checkpoint] = Vector(X Component Of(Global.orbHintArray[Event Player.Checkpoint]), 0,
						Z Component Of(Global.orbHintArray[Event Player.Checkpoint]));
					Event Player.confirmDelete = False;
				End;
				Wait(1.500, Ignore Condition);
			End;
		"Add / Remove 3 Orb"
		Else If(Event Player.currentMenuSelection == 3);
			If(Z Component Of(Global.orbHintArray[Event Player.Checkpoint]) == False);
				Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 30);
				Small Message(Event Player, Custom String("Checkpoint {0} ({1}.{2}) has been marked as a 3 Orb CP.", Event Player.Checkpoint,
					Event Player.Level, Event Player.CPcounter));
				"Set Z Of orbHintArray vector to true and Y to false"
				Global.orbHintArray[Event Player.Checkpoint] = Vector(X Component Of(Global.orbHintArray[Event Player.Checkpoint]), 0, 1);
				Wait(1.500, Ignore Condition);
			Else If(Z Component Of(Global.orbHintArray[Event Player.Checkpoint]) == True);
				Play Effect(Event Player, Explosion Sound, Color(White), Event Player, 30);
				If(Event Player.confirmDelete == False);
					Small Message(Event Player, Custom String("Are you sure you want to delete? Click again to delete."));
					Event Player.confirmDelete = True;
				Else;
					Small Message(Event Player, Custom String("Checkpoint {0} ({1}.{2}) has been unmarked as a 3 Orb CP.", Event Player.Checkpoint,
						Event Player.Level, Event Player.CPcounter));
					"Set Z Of orbHintArray vector to false"
					Global.orbHintArray[Event Player.Checkpoint] = Vector(X Component Of(Global.orbHintArray[Event Player.Checkpoint]), Y Component Of(
						Global.orbHintArray[Event Player.Checkpoint]), 0);
					Event Player.confirmDelete = False;
				End;
				Wait(1.500, Ignore Condition);
			End;
	}
}

rule("Using Interact with this mod closes menu. | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.menuIsOpen == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Destroy HUD Text(Global.menuTextCollector[0]);
		Destroy HUD Text(Global.menuTextCollector[1]);
		Destroy HUD Text(Global.menuTextCollector[2]);
		Destroy HUD Text(Global.menuTextCollector[3]);
		Global.menuTextCollector = Array();
		Event Player.menuIsOpen = False;
		Event Player.confirmDelete = False;
		Call Subroutine(EnableControls);
	}
}

rule("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒a")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Display Hints | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Fail == True || (Is Button Held(Event Player, Button(Melee)) == True && Event Player.ProMode == False)) == True;
		X Component Of(Global.orbHintArray[Event Player.Checkpoint]) == True;
		(Event Player.autoHintCounter < 7 || Is Button Held(Event Player, Button(Melee))) == True;
	}

	actions
	{
		Event Player.currentHintCP = Event Player.Checkpoint;
		Small Message(Event Player, Global.hintStringsArray[Event Player.Checkpoint]);
		Skip If(Is Button Held(Event Player, Button(Melee)), 1);
		Event Player.autoHintCounter += 1;
	}
}

rule("autoHintCounter Reset | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Checkpoint != Event Player.currentHintCP;
	}

	actions
	{
		Event Player.autoHintCounter = 1;
	}
}

rule("TCD detect Modded | Hint / Force Order Mod")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.CPchange[1] == True;
		Event Player.TCDdetect == False;
		Event Player.Fail == False;
		Is True For Any(Event Player.TCDpos,
			Current Array Element && !Event Player.TCDFdisplay[Current Array Index] && !Event Player.TCDFdisplay[Current Array Index + 3] && (
			Distance Between(Position Of(Event Player) + Vector(False, 0.450, False),
			Event Player.TCDeff[Current Array Index] ? Current Array Element * Vector(True, False, True) + Vector(False, Max(
			Y Component Of(Position Of(Event Player)), Y Component Of(Current Array Element)), False) : Current Array Element)
			< Event Player.TCDradD[Current Array Index] || Distance Between(Position Of(Event Player) + Vector(False, 1.250, False),
			Current Array Element) < Event Player.TCDradD[Current Array Index])) == True;
	}

	actions
	{
		Event Player.TCDdetect = Index Of Array Value(Event Player.TCDpos, Filtered Array(Event Player.TCDpos,
			Current Array Element && !Event Player.TCDFdisplay[Current Array Index] && !Event Player.TCDFdisplay[Current Array Index + 3] && (
			Distance Between(Position Of(Event Player) + Vector(False, 0.450, False),
			Event Player.TCDeff[Current Array Index] ? Current Array Element * Vector(True, False, True) + Vector(False, Max(
			Y Component Of(Current Array Element), Y Component Of(Position Of(Event Player))), False) : Current Array Element)
			<= Event Player.TCDrad[Current Array Index] + 1.450 || Distance Between(Position Of(Event Player) + Vector(False, 1.250,
			False), Current Array Element) <= Event Player.TCDrad[Current Array Index] + 1.450))) + True;
		If(Absolute Value(Event Player.TCDtim[Event Player.TCDdetect - True]) != 9999);
			Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 69);
			If(Event Player.TCDtim[Event Player.TCDdetect - True] < 9900);
				Event Player.TCDFdisplay[Event Player.TCDdetect - True] = True;
				Event Player.TCDFdisplay[6] = (Event Player.TCDFdisplay[False] ? Event Player.TCDtim[False] : False) + (
					Event Player.TCDFdisplay[True] ? Event Player.TCDtim[True] : False) + (
					Event Player.TCDFdisplay[2] ? Event Player.TCDtim[2] : False);
			Else;
				Event Player.TCDFdisplay[Event Player.TCDdetect + 2] = True;
				Set Secondary Fire Enabled(Event Player, Event Player.TCDtim[Event Player.TCDdetect - True] % 2 ? True : False);
				Set Ability 1 Enabled(Event Player, Event Player.TCDtim[Event Player.TCDdetect - True] % 3 ? True : False);
				Set Ability 2 Enabled(Event Player, Event Player.TCDtim[Event Player.TCDdetect - True] % 5 ? True : False);
			End;
			If(Array Contains(Event Player.Lock, True));
			
				"2 Orb"
				If(Y Component Of(Global.orbHintArray[Event Player.Checkpoint]) == True);
					"Allow if in order"
					If((Global.TCDpos[Event Player.Checkpoint] && Absolute Value(X Component Of(Global.TCD[Event Player.Checkpoint]))
						!= 9999 ? Event Player.TCDFdisplay[False] || Event Player.TCDFdisplay[3] : True));
						If((Global.TCD2pos[Event Player.Checkpoint] && Absolute Value(Z Component Of(Global.TCD[Event Player.Checkpoint]))
							!= 9999 ? Event Player.TCDFdisplay[1] || Event Player.TCDFdisplay[4] : True));
							Event Player.Lock = False;
						End;
					"If arrive at TCD2pos / Z Component of TCD, deny"
					Else If((Global.TCD2pos[Event Player.Checkpoint] && Absolute Value(Z Component Of(Global.TCD[Event Player.Checkpoint]))
							!= 9999 ? Event Player.TCDFdisplay[1] || Event Player.TCDFdisplay[4] : True));
						disabled Small Message(All Players(All Teams), Custom String("TCD2pos / Z Component of TCD / Disable This Message"));
						Call Subroutine(CPfail);
					End;
					
				"3 Orb"
				Else If(Z Component Of(Global.orbHintArray[Event Player.Checkpoint]) == True);
					"Allow if in order"
					If((Global.TCDpos[Event Player.Checkpoint] && Absolute Value(X Component Of(Global.TCD[Event Player.Checkpoint]))
						!= 9999 ? Event Player.TCDFdisplay[False] || Event Player.TCDFdisplay[3] : True));
						If((Global.TCD3pos[Event Player.Checkpoint] && Absolute Value(Y Component Of(Global.TCD2[Event Player.Checkpoint]))
							!= 9999 ? Event Player.TCDFdisplay[2] || Event Player.TCDFdisplay[5] : True));
							If((Global.TCD2pos[Event Player.Checkpoint] && Absolute Value(Z Component Of(Global.TCD[Event Player.Checkpoint]))
								!= 9999 ? Event Player.TCDFdisplay[1] || Event Player.TCDFdisplay[4] : True));
								Event Player.Lock = False;
							End;
						Else If((Global.TCD2pos[Event Player.Checkpoint] && Absolute Value(Z Component Of(Global.TCD[Event Player.Checkpoint]))
								!= 9999 ? Event Player.TCDFdisplay[1] || Event Player.TCDFdisplay[4] : True));
								Call Subroutine(CPfail);
						End;
					"If arrive at TCD2pos / Z Component of TCD, deny"
					Else If((Global.TCD2pos[Event Player.Checkpoint] && Absolute Value(Z Component Of(Global.TCD[Event Player.Checkpoint]))
							!= 9999 ? Event Player.TCDFdisplay[1] || Event Player.TCDFdisplay[4] : True));
						Call Subroutine(CPfail);
					"If arrive at TCD3pos / Y Component of TCD2, deny"
					Else If((Global.TCD3pos[Event Player.Checkpoint] && Absolute Value(Y Component Of(Global.TCD2[Event Player.Checkpoint]))
							!= 9999 ? Event Player.TCDFdisplay[2] || Event Player.TCDFdisplay[5] : True));
						Call Subroutine(CPfail);
					End;

				"Unmarked, vanilla orbs"
				Else;
					If((Global.TCDpos[Event Player.Checkpoint] && Absolute Value(X Component Of(Global.TCD[Event Player.Checkpoint]))
						!= 9999 ? Event Player.TCDFdisplay[False] || Event Player.TCDFdisplay[3] : True) && (
						Global.TCD2pos[Event Player.Checkpoint] && Absolute Value(Z Component Of(Global.TCD[Event Player.Checkpoint]))
						!= 9999 ? Event Player.TCDFdisplay[1] || Event Player.TCDFdisplay[4] : True) && (
						Global.TCD3pos[Event Player.Checkpoint] && Absolute Value(Y Component Of(Global.TCD2[Event Player.Checkpoint]))
						!= 9999 ? Event Player.TCDFdisplay[2] || Event Player.TCDFdisplay[5] : True));
						Event Player.Lock = False;
					End;
				End;
			End;
		Else;
			If(Event Player.TCDtim[Event Player.TCDdetect - True] < False);
				Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 69);
				Disable Movement Collision With Environment(Event Player, True);
				While(Is True For Any(Event Player.TCDpos,
					Current Array Element && !Event Player.TCDFdisplay[Current Array Index] && !Event Player.TCDFdisplay[Current Array Index + 3] && (
					Distance Between(Position Of(Event Player) + Vector(False, 0.450, False),
					Event Player.TCDeff[Current Array Index] ? Current Array Element * Vector(True, False, True) + Vector(False, Max(
					Y Component Of(Position Of(Event Player)), Y Component Of(Current Array Element)), False) : Current Array Element)
					< Event Player.TCDradD[Current Array Index] || Distance Between(Position Of(Event Player) + Vector(False, 1.250, False),
					Current Array Element) < Event Player.TCDradD[Current Array Index])));
					Wait(0.016, Ignore Condition);
				End;
				Enable Movement Collision With Environment(Event Player);
			Else;
				Call Subroutine(CPfail);
			End;
		End;
		Event Player.TCDdetect = False;
		Loop If Condition Is True;
	}
}

rule("Ordered Orb Text for KNEAT | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
			Create In-World Text(Event Player, !Event Player.TCDFdisplay[3] == True && 
				(Y Component Of(Global.orbHintArray[Event Player.Checkpoint]) || Z Component Of(Global.orbHintArray[Event Player.Checkpoint])) == True ? 
				Custom String("1") : Custom String(""), Global.TCDpos[Event Player.Checkpoint] + Vector(0,.5,0),
				1.5, Clip Against Surfaces, Visible To Position and String, Global.orbColorArray[Global.orbColor], Default Visibility);
			
			Create In-World Text(Event Player, !Event Player.TCDFdisplay[4] == True && 
				(Y Component Of(Global.orbHintArray[Event Player.Checkpoint]) || Z Component Of(Global.orbHintArray[Event Player.Checkpoint])) == True ? 
				(Global.TCD3pos[Event Player.Checkpoint] ? Custom String("3") : Custom String("2")) : Custom String(""),
				Global.TCD2pos[Event Player.Checkpoint] + Vector(0,.5,0), 
				1.5, Clip Against Surfaces, Visible To Position and String, Global.orbColorArray[Global.orbColor], Default Visibility);
				
			Create In-World Text(Event Player, !Event Player.TCDFdisplay[5] == True && 
				(Y Component Of(Global.orbHintArray[Event Player.Checkpoint]) || Z Component Of(Global.orbHintArray[Event Player.Checkpoint])) == True ? 
				(Global.TCD2pos[Event Player.Checkpoint] ? Custom String("2") : Custom String("3")) : Custom String(""), 
				Global.TCD3pos[Event Player.Checkpoint] + Vector(0,.5,0), 
				1.5, Clip Against Surfaces, Visible To Position and String, Global.orbColorArray[Global.orbColor], Default Visibility);
	}
}

rule("Workshop Settings | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.orbColorArray = Array(Color(White), Color(Yellow), Color(Green), Color(Purple), Color(Red),
			Color(Blue), Color(Aqua), Color(Orange), Color(Sky Blue), Color(Turquoise),
			Color(Lime Green), Color(Black), Color(Rose), Color(Violet), Color(Gray));
		Global.orbColor = Workshop Setting Combo(Custom String("Nebula's Mod"), Custom String("Orb Number Color"), 4, Array(
			Custom String("White"), Custom String("Yellow"), Custom String("Green"), Custom String("Purple"), Custom String("Red"),
			Custom String("Blue"), Custom String("Aqua"), Custom String("Orange"), Custom String("Sky Blue"), Custom String("Turquoise"),
			Custom String("Lime Green"), Custom String("Black"), Custom String("Rose"), Custom String("Violet"), Custom String("Gray")),
			0);
	}
}






rule("Paste Orb / Hint Data Here | Hint / Force Orb Order Mod")
{
	event
	{
		Ongoing - Global;
	}
}